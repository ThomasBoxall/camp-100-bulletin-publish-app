# Publish Camp 100 Bulletin

from google.oauth2 import service_account
from googleapiclient.discovery import build
from google.cloud import logging as cloud_logging
from google.cloud.logging.handlers import CloudLoggingHandler


import requests
import base64
import yaml
import logging
import sys
import io
import re
import datetime

# DECLARE CONSTANTS

# INITIALISE CONSTANTS TO BE POPULATED BY CONFIG FILE
GS_SPREADSHEET_ID = ""
GS_SPREADSHEET_SHEET_NAME = ""

GA_SERVICE_ACCOUNT_CREDS_PATH = ""
GA_SERVICE_ACCOUNT_PROJECT_ID = ""
GA_SCOPES = []

WP_USERNAME = ""
WP_APPLICATION_PASSWORD = ""
WP_SITE_URL = ""

APPL_NAME = ""
APPL_ENV = ""

# INITIALISE LOGGING

# SETUP LOGGING LOCAL BUFFER
log_buffer = io.StringIO()
bufferLoggingHandler = logging.StreamHandler(log_buffer)
bufferLoggingFormat = logging.Formatter('[BUFF] %(asctime)s - %(levelname)s - %(message)s')
bufferLoggingHandler.setFormatter(bufferLoggingFormat)

# Get the root logger and add the buffer handler
rootLoggingHandler = logging.getLogger()
rootLoggingHandler.setLevel(logging.INFO) # Set a default level (adjust as needed)
rootLoggingHandler.addHandler(bufferLoggingHandler)

consoleLoggingFormat = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
consoleLoggingHandler = logging.StreamHandler()
consoleLoggingHandler.setFormatter(consoleLoggingFormat)
rootLoggingHandler.addHandler(consoleLoggingHandler)


# Regex to parse the log line generated by our formatter
# This assumes the format: 'YYYY-MM-DD HH:MM:SS,ms - LEVELNAME - LOGGER_NAME - ENV - MESSAGE'
LOG_PARSE_REGEX = re.compile(
    r"^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) "
    r"- (?P<levelname>[A-Z]+) "
    r"- (?P<name>[\w.]+) "
    r"- (?P<env>[\w.]+) "
    r"- (?P<message>.*)$"
)

# Severity mapping for Cloud Logging
SEVERITY_MAP = {
    'DEBUG': 'DEBUG',
    'INFO': 'INFO',
    'WARNING': 'WARNING',
    'ERROR': 'ERROR',
    'CRITICAL': 'CRITICAL'
}

# some voodoo magic used here because we need to attach the cloud logging, after writing log entries because of reading service account credentials from file & wanting to log that!
# code produced by Gemini. No clue how or why it works but it seems to

def setupCloudLogging(credentials_path: str, project_id: str):
    rootLoggingHandler.info("Attempting to set up Google Cloud Logging...") # This log goes to buffer for now

    try:
        credentials = service_account.Credentials.from_service_account_file(credentials_path)
        client = cloud_logging.Client(
            project=project_id,
            credentials=credentials
        )

        # Parse through buffered log entries and prepare them for logging to the Cloud Logger
        buffered_logs_string = log_buffer.getvalue()
        if buffered_logs_string:
            rootLoggingHandler.info("Flushing previously buffered logs to Google Cloud Logging (chronologically)...")
            logger_cloud = client.logger(APPL_NAME) # Get a logger object for manual logging

            for line in buffered_logs_string.splitlines():
                if not line.strip():
                    continue

                match = LOG_PARSE_REGEX.match(line)
                if match:
                    log_data = match.groupdict()
                    # Parse timestamp from string to datetime object
                    timestamp_str = log_data['timestamp'].replace(',', '.') # Convert 'ms' comma to dot for parsing
                    timestamp_dt = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S.%f')

                    # Prepare struct for Cloud Logging, includes original fields
                    log_entry_struct = {
                        "message": log_data['message'],
                        "severity": SEVERITY_MAP.get(log_data['levelname'], 'DEFAULT'),
                        "source_logger": log_data['name'],
                        "environment": log_data['env'],
                        # Add any other fields you want to extract and log as structured data
                    }
                    
                    # Manually log the text payload and structure with the original timestamp
                    logger_cloud.log_struct(
                        log_entry_struct,
                        timestamp=timestamp_dt,
                        severity=SEVERITY_MAP.get(log_data['levelname'], 'DEFAULT') # Ensure severity is also set
                    )
                else:
                    # If parsing fails, just log the raw line as INFO
                    logger_cloud.log_text(line, severity='INFO')

            rootLoggingHandler.info("Buffered logs flushed to Cloud Logging.")
        else:
            rootLoggingHandler.info("No logs were buffered before Cloud Logging setup.")


        # attach the CloudLoggingHandler for future logs
        cloudLoggingHandler = CloudLoggingHandler(client=client)
        cloudLoggingFormat = logging.Formatter(f'{APPL_NAME} {APPL_ENV} %(asctime)s - %(levelname)s - %(message)s')
        cloudLoggingHandler.setFormatter(cloudLoggingFormat)

        rootLoggingHandler.removeHandler(bufferLoggingHandler)
        rootLoggingHandler.removeHandler(consoleLoggingHandler)
        rootLoggingHandler.addHandler(consoleLoggingHandler)
        rootLoggingHandler.addHandler(cloudLoggingHandler)

        rootLoggingHandler.info("Google Cloud Logging handler attached for future logs.")


    except Exception as e:
        # If Cloud Logging setup fails, ensure local logging remains active
        rootLoggingHandler.error(f"Failed to set up Google Cloud Logging: {e}")
        # Make sure console handler is still attached if Cloud Logging fails
        rootLoggingHandler.addHandler(consoleLoggingHandler)
        rootLoggingHandler.info("Continuing with local logging due to Cloud Logging setup failure.")


def initialise():
    # initialise the program

    logging.info("begin initialising")

    global GS_SPREADSHEET_ID, GS_SPREADSHEET_SHEET_NAME, GA_SERVICE_ACCOUNT_CREDS_PATH, GA_SERVICE_ACCOUNT_PROJECT_ID, GA_SCOPES, WP_USERNAME, WP_APPLICATION_PASSWORD, WP_SITE_URL, APPL_ENV, APPL_NAME

    try:
        with open('config.yml', 'r') as configYml:
            logging.info("opened config file")
            configData = yaml.safe_load(configYml)
    except FileNotFoundError as fnfError:
            logging.error('file not found')
            sys.exit()
    
    # we have found the file so crack on and read it
    GS_SPREADSHEET_ID = configData['google-sheets']['spreadsheet-id']
    GS_SPREADSHEET_SHEET_NAME = configData['google-sheets']['spreadsheet-sheet-name']

    GA_SERVICE_ACCOUNT_CREDS_PATH = configData['google-auth']['service-account-creds-path']
    GA_SERVICE_ACCOUNT_PROJECT_ID = configData['google-auth']['service-account-project-id']
    GA_SCOPES = configData['google-auth']['auth-scopes']

    WP_USERNAME = configData['wordpress']['username']
    WP_APPLICATION_PASSWORD = configData['wordpress']['application-password']
    WP_SITE_URL = configData['wordpress']['site-url']

    APPL_NAME = configData['application']['name']
    APPL_ENV = configData['application']['environment']

    logging.info("complete initialisation")


def main():
    logging.info("starting main execution")

    logging.info("starting google credentials validation")

    ga_creds = None
    ga_creds = service_account.Credentials.from_service_account_file(
                                filename=GA_SERVICE_ACCOUNT_CREDS_PATH, 
                                scopes=GA_SCOPES)
    
    logging.info("creds validated")

    logging.info("beginning sheet fetch")

    try:
        gs_service = build('sheets', 'v4', credentials=ga_creds)

        result = gs_service.spreadsheets().values().get(
            spreadsheetId=GS_SPREADSHEET_ID, range=GS_SPREADSHEET_SHEET_NAME).execute()
        values = result.get('values', [])

        if not values:
            print('No data found in the spreadsheet.')
            logging.info("no data in spreadsheet")
            return ('No data found.')
        else:
            print('Data from Google Sheet:')
            for row in values:
                logging.debug(f"row: {row}")
            logging.info(f'Successfully read {len(values)} rows from Google Sheet')

            wpPostContent = buildWPPostContent(values)

            postToWP('test1', wpPostContent)
    
    except Exception as e:
        logging.error(f"Error consuming Google Sheet: {e}")
        
def buildWPPostContent(responseContent):
    wpPost = "<p>Published at (time)</p>"
    
    # delete the header from the spreadsheet
    del responseContent[0]

    for oneRecord in responseContent:
        if oneRecord[0] == '1':
            # to be included
            oneRecordText = f"<h3>{oneRecord[1]}</h3><p>{oneRecord[2]}</p><p>From: {oneRecord[3]}</p>"
            wpPost += oneRecordText
    
    logging.info(wpPost)
    return wpPost

def postToWP(title, content):
    wp_credentials = f"{WP_USERNAME}:{WP_APPLICATION_PASSWORD}"
    wp_token = base64.b64encode(wp_credentials.encode()).decode('utf-8')

    wp_headers = {
        'Authorization': f'Basic {wp_token}',
        'Content-Type': 'application/json'
    }

    api_url = f"{WP_SITE_URL}/wp-json/wp/v2/posts"
    data = {
    'title' : title,
    'status': 'publish',
    'slug' : f'example-post-{title}',
    'content': content
    }
    response = requests.post(api_url,headers=wp_headers, json=data)
    logging.info(response)

if __name__ == "__main__":
  logging.info("--- APPLICAITON STARTUP ---")
  initialise()
  setupCloudLogging(GA_SERVICE_ACCOUNT_CREDS_PATH, GA_SERVICE_ACCOUNT_PROJECT_ID)
  main()
  logging.info("--- APPLICATION TERMINATION ---")